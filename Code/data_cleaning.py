import pandas as pd
from sklearn.preprocessing import MinMaxScaler

def clean_data(input_file, output_file):
    """
    Cleans the stock market data by handling missing values and normalizing the data.

    Args:
        input_file (str): Path to the input CSV file.
        output_file (str): Path to the output CSV file.
    """
    try:
        # Load data
        data = pd.read_csv(input_file)
        print("Data loaded successfully.")
        
        # Convert relevant columns to numeric, coercing errors to NaN
        cols = ["price", "close", "high", "low", "open", "volume"]
        data[cols] = data[cols].apply(pd.to_numeric, errors="coerce")
        print("Converted relevant columns to numeric.")
        
        # Handle NaN values in the price column specifically
        if data["price"].isna().sum() > 0:
            print("Handling NaN values in the price column.")
            data["price"] = data["price"].fillna(data["price"].mean())

        # Select numeric columns
        numeric_data = data.select_dtypes(include="number")
        print("Selected numeric columns.")
        
        # Fill missing values with the mean for other columns
        numeric_data = numeric_data.fillna(numeric_data.mean())
        print("Missing values filled.")
        
        # Normalize data using Min-Max Scaling
        scaler = MinMaxScaler()
        data_scaled = pd.DataFrame(scaler.fit_transform(numeric_data), columns=numeric_data.columns)
        print("Data normalized.")
        
        # Save cleaned data to the specific path
        data_scaled.to_csv(output_file, index=False)
        print(f"Cleaned data saved to {output_file}")

    except Exception as e:
        print(f"Error cleaning data: {str(e)}")  # Ensure error message is a string

# Specify the input and output file paths
input_file = "C:/Projects/Simplified_Stock_Market_Predictor_AI/Sandbox/fixed_test_stock_data.csv"
output_file = "C:/Projects/Simplified_Stock_Market_Predictor_AI/Sandbox/cleaned_test_stock_data.csv"

# Clean the data
clean_data(input_file, output_file)

# Generated by Nicole LeGuern